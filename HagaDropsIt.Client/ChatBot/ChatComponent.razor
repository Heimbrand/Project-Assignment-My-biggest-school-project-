@page "/chat"
@using HagaDropsIt.Client.ChatBot.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using HagaDropsIt.Client.ChatBot.Entities;
@inject IJSRuntime JsRuntime
@inject IChatService ChatService

<div class="@chatClass" @onclick="OpenChat">
    @if (isChatOpen)
    {
       
            <div class="header">
                <button class="btn-close" @onclick="CloseChat" @onclick:stopPropagation="true">
                    <i class="fa fa-times" aria-hidden="true"></i>
                </button>
            </div>
        <div class="messages-wrapper" id="messages-wrapper">
            <div class="overflowy-auto messages" id="messagesContainer">
                <ul>
                    @foreach (var message in Messages)
                    {
                        <li class="@message.CssClass">
                            @if (!string.IsNullOrEmpty(message.ImageUrl))
                            {
                                <img class="chatMsgImage" src="@message.ImageUrl" alt="Chat Image" />
                            }
                            @if (!string.IsNullOrEmpty(message.Text))
                            {
                                <span>@message.Text</span>
                            }
                        </li>
                    }
                    @if (isLoading)
                    {
                        <li class="loading-message">
                            <div class="spinner"></div>
                        </li>
                    }
                </ul>

            </div>
        </div>

            <div class="message-box">
                <textarea class="message-input"
                          placeholder="Type your message here..."
                          @bind="currentMessage"
                          @onkeydown="HandleKeyPress"></textarea>
                <button class="message-submit" @onclick="SendMessage">Send</button>
            </div>
     
    }
    else
    {
        <i class="fa fa-comments" aria-hidden="true"></i>
    }
</div>


@code {
     private string currentMessage = string.Empty;
    private List<ChatMessage> Messages = new List<ChatMessage>();
    private string chatClass = "chatClosed";
    private bool isChatOpen = false;
    private bool isLoading = false;


    protected override void OnInitialized()
    {
        ChatService.MessageReceived += AddMessage;
        Messages.Add(new ChatMessage { Text = "Hello! How can I help you today?", CssClass = "bot-message" });
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(currentMessage))
        {
            try
            {
                isLoading = true;
                await InvokeAsync(StateHasChanged);

                ChatMessage newMessage = CreateChatMessage(currentMessage);
                Messages.Add(newMessage);

                currentMessage = string.Empty;
                await InvokeAsync(StateHasChanged);
                await ScrollToBottomAsync();
                await ChatService.GetResponseAsync(newMessage.Text);
            }
            catch (Exception ex)
            {
             
                Messages.Add(new ChatMessage { Text = "Failed to send message. Please try again.", CssClass = "error-message" });
            }
            finally
            {
                isLoading = false;
                await InvokeAsync(StateHasChanged); 
            }
        }
    }

    private ChatMessage CreateChatMessage(string input)
    {
        if (input.StartsWith("img:"))
        {
            var imageUrl = input.Substring(4);
            return new ChatMessage { ImageUrl = imageUrl, CssClass = "user-message" };
        }
        else
        {
            return new ChatMessage { Text = input, CssClass = "user-message" };
        }
    }



    private async Task AddMessage(ChatMessage message)
    {
        if (message == null)
        {
            throw new ArgumentNullException(nameof(message), "Received message is null.");
        }

        Messages.Add(message);
        isLoading = false;
        await InvokeAsync(StateHasChanged);
        await ScrollToBottomAsync();
    }



    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(currentMessage))
        
        {
            await SendMessage();
            
        }
    }


    private void CloseChat()
    {
        isChatOpen = false;
        chatClass = "chatClosed";
        InvokeAsync(StateHasChanged);
    }

    private void OpenChat()
    {
        isChatOpen = true;
        chatClass = "chatOpen";
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ChatService.MessageReceived -= AddMessage;
    }

    private async Task ScrollToBottomAsync()
    {
        await JsRuntime.InvokeVoidAsync("scrollToBottom", "messages-wrapper");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        await ScrollToBottomAsync();
    }
}


}
