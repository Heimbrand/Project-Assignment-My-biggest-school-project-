@page "/admin/events/delete/{EventId:int}"
@using HagaDropsIt.Shared.DTOs
@using HagaDropsIt.Shared.Interfaces
@inject ILogger<EditEvent> Logger
@inject IEventService<EventDto> EventService
@inject NavigationManager NavigationManager
@layout AdminLayout

<div class="container">
<h3>Delete Event</h3>

@if (eventToDelete != null)
{
    <div class="delete-confirmation">
        <p>Are you sure you want to delete the following event?</p>
        <div class="event-details">
            <h4>@eventToDelete.Name</h4>
            <p>@eventToDelete.Description</p>
            <p>Date: @eventToDelete.StartDate.ToShortDateString()</p>
            <p>Location: @eventToDelete.Location</p>
        </div>
        <div class="buttons">
            <button class="btn btn-danger" @onclick="ConfirmDeletion">Delete Event</button>
            <button class="btn btn-secondary" @onclick="CancelDeletion">Cancel</button>
        </div>
    </div>
}

else
{
    <p>Loading event details...</p>
}
</div>

@code {
    [Parameter] public int EventId { get; set; }
    private EventDto eventToDelete = new();
    private string eventsBlobContainer = "events";

    protected override async Task OnInitializedAsync()
    {
        eventToDelete = await EventService.GetEventById(EventId);
    }

    private async Task ConfirmDeletion()
    {
        
        await EventService.DeleteEvent(EventId);
        NavigationManager.NavigateTo("/admin/events");
    }

    private void CancelDeletion()
    {
        NavigationManager.NavigateTo("/admin/events");
    }
}
