@page "/admin/events/edit/{EventId:int}"
@using HagaDropsIt.Shared.DTOs
@using HagaDropsIt.Client.Services
@using HagaDropsIt.Shared.Interfaces
@using Microsoft.Extensions.Logging
@using HagaDropsIt.Client.Utils;
@inject ILogger<EditEvent> Logger
@inject IEventService<EventDto> EventService
@inject NavigationManager NavigationManager
@inject IBlobStorageServices BlobStorageService
@inject IBlobTools BlobTools
@layout AdminLayout

<div class="card container">
    <h3>Edit Event</h3>

    @if (eventToEdit == null)
    {
        <p>Loading event details...</p>
    }
    else
    {
        <EditForm Model="eventToEdit" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <img class="event-image" src="@eventToEdit.ImageURL" alt="@eventToEdit.Name" />
                <div class="form-group">
                    <label for="imageFile">Event Image:</label>
                    <InputFile id="imageFile" OnChange="HandleFileSelected" />
                </div>
            </div>

            <div class="form-group">
                <label for="name">Namn:</label>
                <InputText id="name" class="form-control" @bind-Value="eventToEdit.Name" />
            </div>

            <div class="form-group">
                <label for="description">Description:</label>
                <InputTextArea id="description" class="form-control" @bind-Value="eventToEdit.Description" />
            </div>

            <div class="form-group">
                <label for="startDate">Startdatum:</label>
                <InputText id="startDate" class="form-control" @bind-Value="startDateInput" />
            </div>
            <div class="form-group">
                <label for="endDate">Slutdatum:</label>
                <InputText id="endDate" class="form-control" @bind-Value="endDateInput" />
            </div>


            <div class="form-group">
                <label for="imageURL">Assets/Products/Phoenix Stream Console.webp</label>
                <InputText id="imageURL" class="form-control" @bind-Value="eventToEdit.ImageURL" />
            </div>

            <div class="form-group">
                <label for="location">Plats:</label>
                <InputText id="location" class="form-control" @bind-Value="eventToEdit.Location" />
            </div>

            <div class="form-group">
                <label for="price">Price:</label>
                <InputNumber id="price" class="form-control" @bind-Value="eventToEdit.Price" />
            </div>


            <div class="buttons">
                <button type="submit" class="btn btn-success">Save Changes</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public int EventId { get; set; }
    private string eventsBlobContainer = "events";
    private EventDto eventToEdit = new();
    private IBrowserFile? selectedFile;
    private string startDateInput; 
    private string endDateInput; 

    protected override async Task OnInitializedAsync()
    {
        var events = await EventService.GetAllEvents();
        if (events != null)
        {
            eventToEdit = events.FirstOrDefault(e => e.Id == EventId);
        }
        else
        {
            NavigationManager.NavigateTo("/admin/events");
        }
        if (eventToEdit == null)
        {
            NavigationManager.NavigateTo("/admin/events");
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task OnValidSubmit()
    {
        if (DateTime.TryParse(startDateInput, out var startDate))
        {
            eventToEdit.StartDate = startDate;
        }
        else
        {
            Logger.LogError("Invalid start date format.");
            return;
        }

        if (DateTime.TryParse(endDateInput, out var endDate))
        {
            eventToEdit.EndDate = endDate;
        }
        else
        {
            Logger.LogError("Invalid end date format.");
            return;
        }
        if (selectedFile != null)
        {
            string blobName = BlobTools.ExtractBlobNameFromUrl(eventToEdit.ImageURL);
            Logger.LogInformation("Existing blob name: {BlobName}", blobName);
            if (!string.IsNullOrEmpty(blobName))
            {
                var blobExists = await BlobStorageService.BlobExistsAsync(eventsBlobContainer, blobName);
                Logger.LogInformation("Blob exists: {BlobExists}", blobExists.Data);
                if (blobExists.Success && blobExists.Data)
                {
                    var deleteResult = await BlobStorageService.DeleteBlobAsync(eventsBlobContainer, blobName);
                    if (!deleteResult.Success)
                    {
                        Logger.LogWarning("Failed to delete existing blob: {BlobName}. Proceeding with update.", blobName);
                    }
                }
            }

            using var stream = selectedFile.OpenReadStream();
            string newBlobName = BlobTools.GenerateBlobName(selectedFile.Name);
            var uploadResult = await BlobStorageService.UploadBlobAsync(eventsBlobContainer, newBlobName, stream);
            if (uploadResult.Success)
            {
                string cleanUrl = uploadResult.Data.Replace("\"", "").Trim();
                eventToEdit.ImageURL = cleanUrl;
                Logger.LogInformation("Uploaded new blob: {BlobName}", cleanUrl);
            }
            else
            {
                Logger.LogError("Error uploading file: {ErrorMessage}", uploadResult.ErrorMessage);
                return;
            }
        }
        else
        {
            var defaultImageUrl = "/Assets/Images/haga.webp";
            eventToEdit.ImageURL = defaultImageUrl;
        }

        await EventService.UpdateEvent(eventToEdit);
        Logger.LogInformation("Updated event: {EventId}", eventToEdit.Id);
        NavigationManager.NavigateTo("/admin/events");
    }



    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin/events");
    }
}

